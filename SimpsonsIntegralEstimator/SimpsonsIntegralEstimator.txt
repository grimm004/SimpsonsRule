; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25507.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
PUBLIC	printf
PUBLIC	?pow@@YANNH@Z					; pow
PUBLIC	main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0CF@OICLFPHE@n?3?5?$CFu?7Tn?3?5?$CF?420f?7Mn?3?5?$CF?420f?7Sn?3?5?$CF?4@ ; `string'
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4024000000000000
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	log:PROC
EXTRN	pow:PROC
EXTRN	__imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAHXZ:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pow@@YANNH@Z DD imagerel $LN4
	DD	imagerel $LN4+100
	DD	imagerel $unwind$?pow@@YANNH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?f@@YANN@Z DD imagerel ?f@@YANN@Z
	DD	imagerel ?f@@YANN@Z+147
	DD	imagerel $unwind$?f@@YANN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?t@@YANJNN@Z DD imagerel ?t@@YANJNN@Z
	DD	imagerel ?t@@YANJNN@Z+276
	DD	imagerel $unwind$?t@@YANJNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?m@@YANJNN@Z DD imagerel ?m@@YANJNN@Z
	DD	imagerel ?m@@YANJNN@Z+211
	DD	imagerel $unwind$?m@@YANJNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?s@@YANNN@Z DD imagerel ?s@@YANNN@Z
	DD	imagerel ?s@@YANNN@Z+90
	DD	imagerel $unwind$?s@@YANNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN6
	DD	imagerel $LN6+266
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CF@OICLFPHE@n?3?5?$CFu?7Tn?3?5?$CF?420f?7Mn?3?5?$CF?420f?7Sn?3?5?$CF?4@
CONST	SEGMENT
??_C@_0CF@OICLFPHE@n?3?5?$CFu?7Tn?3?5?$CF?420f?7Mn?3?5?$CF?420f?7Sn?3?5?$CF?4@ DB 'n'
	DB	': %u', 09H, 'Tn: %.20f', 09H, 'Mn: %.20f', 09H, 'Sn: %.20f', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	035051e01H
	DD	010a330fH
	DD	07003003bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?s@@YANNN@Z DD 015052901H
	DD	0115131aH
	DD	0700e001bH
	DD	0500dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?m@@YANJNN@Z DD 035053401H
	DD	0119331eH
	DD	07012002fH
	DD	05011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?t@@YANJNN@Z DD 035053401H
	DD	0119331eH
	DD	07012002fH
	DD	05011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?f@@YANN@Z DD 035052301H
	DD	010f3314H
	DD	070080021H
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pow@@YANNH@Z DD 035052701H
	DD	01133318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 025053901H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\max grimmett\documents\github\simpsonsrule\simpsonsintegralestimator\simpsonsintegralestimator.cpp
;	COMDAT main
_TEXT	SEGMENT
i$1 = 4
n$2 = 36
start$3 = 68
end$4 = 100
tn$5 = 136
mn$6 = 168
sn$7 = 200
main	PROC						; COMDAT

; 38   : {

$LN6:
	push	rbp
	push	rdi
	sub	rsp, 472				; 000001d8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 39   : 	for (int i = 0; i < 30; i++)

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@main:
	cmp	DWORD PTR i$1[rbp], 30
	jge	$LN3@main

; 40   : 	{
; 41   : 		long n = (int)pow(2.0, i);

	mov	edx, DWORD PTR i$1[rbp]
	movsd	xmm0, QWORD PTR __real@4000000000000000
	call	?pow@@YANNH@Z				; pow
	cvttsd2si eax, xmm0
	mov	DWORD PTR n$2[rbp], eax

; 42   : 		int start = 2;

	mov	DWORD PTR start$3[rbp], 2

; 43   : 		int end = 4;

	mov	DWORD PTR end$4[rbp], 4

; 44   : 
; 45   : 		double tn = t(n, start, end);

	cvtsi2sd xmm0, DWORD PTR end$4[rbp]
	cvtsi2sd xmm1, DWORD PTR start$3[rbp]
	movaps	xmm2, xmm0
	mov	ecx, DWORD PTR n$2[rbp]
	call	?t@@YANJNN@Z				; t
	movsd	QWORD PTR tn$5[rbp], xmm0

; 46   : 		double mn = m(n, start, end);

	cvtsi2sd xmm0, DWORD PTR end$4[rbp]
	cvtsi2sd xmm1, DWORD PTR start$3[rbp]
	movaps	xmm2, xmm0
	mov	ecx, DWORD PTR n$2[rbp]
	call	?m@@YANJNN@Z				; m
	movsd	QWORD PTR mn$6[rbp], xmm0

; 47   : 		double sn = s(tn, mn);

	movsd	xmm1, QWORD PTR mn$6[rbp]
	movsd	xmm0, QWORD PTR tn$5[rbp]
	call	?s@@YANNN@Z				; s
	movsd	QWORD PTR sn$7[rbp], xmm0

; 48   : 
; 49   : 		printf("n: %u\tTn: %.20f\tMn: %.20f\tSn: %.20f\n", n, tn, mn, sn);

	movsd	xmm0, QWORD PTR sn$7[rbp]
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR mn$6[rbp]
	movq	r9, xmm3
	movsd	xmm2, QWORD PTR tn$5[rbp]
	movq	r8, xmm2
	mov	edx, DWORD PTR n$2[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0CF@OICLFPHE@n?3?5?$CFu?7Tn?3?5?$CF?420f?7Mn?3?5?$CF?420f?7Sn?3?5?$CF?4@
	call	printf

; 50   : 	}

	jmp	$LN2@main
$LN3@main:

; 51   : 
; 52   : 	std::cin.get();

	mov	rcx, QWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	QWORD PTR __imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAHXZ

; 53   : 
; 54   : 	return 0;

	xor	eax, eax

; 55   : }

	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\max grimmett\documents\github\simpsonsrule\simpsonsintegralestimator\simpsonsintegralestimator.cpp
;	COMDAT ?s@@YANNN@Z
_TEXT	SEGMENT
tn$ = 224
mn$ = 232
?s@@YANNN@Z PROC					; s, COMDAT

; 33   : {

	movsd	QWORD PTR [rsp+16], xmm1
	movsd	QWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 216				; 000000d8H
	lea	rbp, QWORD PTR [rsp+16]
	mov	rdi, rsp
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 34   : 	return (tn + (2 * mn)) / 3;

	movsd	xmm0, QWORD PTR __real@4000000000000000
	mulsd	xmm0, QWORD PTR mn$[rbp]
	movsd	xmm1, QWORD PTR tn$[rbp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	divsd	xmm0, QWORD PTR __real@4008000000000000

; 35   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?s@@YANNN@Z ENDP					; s
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\max grimmett\documents\github\simpsonsrule\simpsonsintegralestimator\simpsonsintegralestimator.cpp
;	COMDAT ?m@@YANJNN@Z
_TEXT	SEGMENT
interval$ = 8
total$ = 40
current$ = 72
i$1 = 100
n$ = 352
start$ = 360
end$ = 368
?m@@YANJNN@Z PROC					; m, COMDAT

; 24   : {

	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 376				; 00000178H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+408]

; 25   : 	double interval = (end - start) / n;

	movsd	xmm0, QWORD PTR end$[rbp]
	subsd	xmm0, QWORD PTR start$[rbp]
	cvtsi2sd xmm1, DWORD PTR n$[rbp]
	divsd	xmm0, xmm1
	movsd	QWORD PTR interval$[rbp], xmm0

; 26   : 	double total = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR total$[rbp], xmm0

; 27   : 	double current = start;

	movsd	xmm0, QWORD PTR start$[rbp]
	movsd	QWORD PTR current$[rbp], xmm0

; 28   : 	for (int i = 0; i < n; i++) total += f((current + (current += interval)) / 2);

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@m
$LN2@m:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@m:
	mov	eax, DWORD PTR n$[rbp]
	cmp	DWORD PTR i$1[rbp], eax
	jge	SHORT $LN3@m
	movsd	xmm0, QWORD PTR current$[rbp]
	addsd	xmm0, QWORD PTR interval$[rbp]
	movsd	QWORD PTR current$[rbp], xmm0
	movsd	xmm0, QWORD PTR current$[rbp]
	addsd	xmm0, QWORD PTR current$[rbp]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	call	?f@@YANN@Z				; f
	movsd	xmm1, QWORD PTR total$[rbp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR total$[rbp], xmm0
	jmp	SHORT $LN2@m
$LN3@m:

; 29   : 	return interval * total;

	movsd	xmm0, QWORD PTR interval$[rbp]
	mulsd	xmm0, QWORD PTR total$[rbp]

; 30   : }

	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?m@@YANJNN@Z ENDP					; m
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\max grimmett\documents\github\simpsonsrule\simpsonsintegralestimator\simpsonsintegralestimator.cpp
;	COMDAT ?t@@YANJNN@Z
_TEXT	SEGMENT
interval$ = 8
total$ = 40
current$ = 72
i$1 = 100
tv75 = 312
n$ = 352
start$ = 360
end$ = 368
?t@@YANJNN@Z PROC					; t, COMDAT

; 15   : {

	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 376				; 00000178H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+408]

; 16   : 	double interval = (end - start) / n;

	movsd	xmm0, QWORD PTR end$[rbp]
	subsd	xmm0, QWORD PTR start$[rbp]
	cvtsi2sd xmm1, DWORD PTR n$[rbp]
	divsd	xmm0, xmm1
	movsd	QWORD PTR interval$[rbp], xmm0

; 17   : 	double total = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR total$[rbp], xmm0

; 18   : 	double current = start;

	movsd	xmm0, QWORD PTR start$[rbp]
	movsd	QWORD PTR current$[rbp], xmm0

; 19   : 	for (int i = 0; i < n - 1; i++) total += f((current += interval));

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@t
$LN2@t:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@t:
	mov	eax, DWORD PTR n$[rbp]
	dec	eax
	cmp	DWORD PTR i$1[rbp], eax
	jge	SHORT $LN3@t
	movsd	xmm0, QWORD PTR current$[rbp]
	addsd	xmm0, QWORD PTR interval$[rbp]
	movsd	QWORD PTR current$[rbp], xmm0
	movsd	xmm0, QWORD PTR current$[rbp]
	call	?f@@YANN@Z				; f
	movsd	xmm1, QWORD PTR total$[rbp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR total$[rbp], xmm0
	jmp	SHORT $LN2@t
$LN3@t:

; 20   : 	return (interval * (f(start) + f(end) + (2 * total))) / 2;

	movsd	xmm0, QWORD PTR start$[rbp]
	call	?f@@YANN@Z				; f
	movsd	QWORD PTR tv75[rbp], xmm0
	movsd	xmm0, QWORD PTR end$[rbp]
	call	?f@@YANN@Z				; f
	movsd	xmm1, QWORD PTR tv75[rbp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@4000000000000000
	mulsd	xmm1, QWORD PTR total$[rbp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR interval$[rbp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	divsd	xmm0, QWORD PTR __real@4000000000000000

; 21   : }

	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?t@@YANJNN@Z ENDP					; t
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\max grimmett\documents\github\simpsonsrule\simpsonsintegralestimator\simpsonsintegralestimator.cpp
;	COMDAT ?f@@YANN@Z
_TEXT	SEGMENT
tv67 = 192
x$ = 240
?f@@YANN@Z PROC						; f, COMDAT

; 10   : {

	movsd	QWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11   : 	return 10 / ((3 * (x * x)) - (2 * x) + log(x));

	movsd	xmm0, QWORD PTR x$[rbp]
	mulsd	xmm0, QWORD PTR x$[rbp]
	movsd	xmm1, QWORD PTR __real@4008000000000000
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@4000000000000000
	mulsd	xmm1, QWORD PTR x$[rbp]
	subsd	xmm0, xmm1
	movsd	QWORD PTR tv67[rbp], xmm0
	movsd	xmm0, QWORD PTR x$[rbp]
	call	log
	movsd	xmm1, QWORD PTR tv67[rbp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@4024000000000000
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1

; 12   : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?f@@YANN@Z ENDP						; f
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\cmath
;	COMDAT ?pow@@YANNH@Z
_TEXT	SEGMENT
_Xx$ = 224
_Yx$ = 232
?pow@@YANNH@Z PROC					; pow, COMDAT

; 10   : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	movsd	QWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11   : 	if (_Yx == 2)

	cmp	DWORD PTR _Yx$[rbp], 2
	jne	SHORT $LN2@pow

; 12   : 		return (_Xx * _Xx);

	movsd	xmm0, QWORD PTR _Xx$[rbp]
	mulsd	xmm0, QWORD PTR _Xx$[rbp]
	jmp	SHORT $LN1@pow
$LN2@pow:

; 13   : 
; 14   : 	return (_CSTD pow(_Xx, static_cast<double>(_Yx)));

	cvtsi2sd xmm0, DWORD PTR _Yx$[rbp]
	movaps	xmm1, xmm0
	movsd	xmm0, QWORD PTR _Xx$[rbp]
	call	pow
$LN1@pow:

; 15   : 	}

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?pow@@YANNH@Z ENDP					; pow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
_Format$ = 288
printf	PROC						; COMDAT

; 952  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]

; 953  :         int _Result;
; 954  :         va_list _ArgList;
; 955  :         __crt_va_start(_ArgList, _Format);

	call	??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
	lea	rax, QWORD PTR _Format$[rbp+8]
	mov	QWORD PTR _ArgList$[rbp], rax

; 956  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rbp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rbp], eax

; 957  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rbp], 0

; 958  :         return _Result;

	mov	eax, DWORD PTR _Result$[rbp]

; 959  :     }

	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ PROC ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>, COMDAT

; 150  :         {

$LN3:
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 151  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 152  :         }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ENDP ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 224
_Format$ = 232
_Locale$ = 240
_ArgList$ = 248
_vfprintf_l PROC					; COMDAT

; 640  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]

; 641  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rbp]
	mov	r8, QWORD PTR _Format$[rbp]
	mov	rdx, QWORD PTR _Stream$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 642  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 85   :     {

$LN3:
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\max grimmett\documents\github\simpsonsrule\simpsonsintegralestimator\simpsonsintegralestimator.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+232]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\max grimmett\documents\github\simpsonsrule\simpsonsintegralestimator\simpsonsintegralestimator.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+232]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
